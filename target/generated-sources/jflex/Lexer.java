/* The following code was generated by JFlex 1.6.1 */

 import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import mx.uach.compiladores.analizadorlexico.Token;
import java.util.stream.Collectors;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Dani/Documents/Compiladores/Proyecto2doParcial/src/main/jflex/lexer.jflex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\0\1\0\7\0\1\24\1\17\1\17\1\17\1\17\22\0\1\31"+
    "\1\0\1\23\4\0\1\16\1\4\1\5\1\24\1\10\1\7\1\2"+
    "\1\6\1\0\12\11\1\1\1\3\3\0\1\27\1\0\4\15\1\22"+
    "\25\15\1\14\1\0\1\26\1\0\1\20\1\0\4\12\1\21\21\12"+
    "\1\25\3\12\1\0\1\30\10\0\1\17\32\0\1\24\11\0\1\13"+
    "\12\0\1\13\4\0\1\13\5\0\27\13\1\0\37\13\1\0\u01ca\13"+
    "\4\0\14\13\16\0\5\13\7\0\1\13\1\0\1\13\21\0\165\13"+
    "\1\0\2\13\2\0\4\13\1\0\1\13\6\0\1\13\1\0\3\13"+
    "\1\0\1\13\1\0\24\13\1\0\123\13\1\0\213\13\1\0\255\13"+
    "\1\0\46\13\2\0\1\13\7\0\47\13\11\0\55\13\1\0\1\13"+
    "\1\0\2\13\1\0\2\13\1\0\1\13\10\0\33\13\5\0\3\13"+
    "\35\0\13\13\5\0\112\13\4\0\146\13\1\0\10\13\2\0\12\13"+
    "\1\0\23\13\2\0\1\13\20\0\73\13\2\0\145\13\16\0\66\13"+
    "\4\0\1\13\5\0\56\13\22\0\34\13\104\0\23\13\61\0\200\13"+
    "\2\0\12\13\1\0\23\13\1\0\10\13\2\0\2\13\2\0\26\13"+
    "\1\0\7\13\1\0\1\13\3\0\4\13\2\0\11\13\2\0\2\13"+
    "\2\0\4\13\10\0\1\13\4\0\2\13\1\0\5\13\2\0\14\13"+
    "\17\0\3\13\1\0\6\13\4\0\2\13\2\0\26\13\1\0\7\13"+
    "\1\0\2\13\1\0\2\13\1\0\2\13\2\0\1\13\1\0\5\13"+
    "\4\0\2\13\2\0\3\13\3\0\1\13\7\0\4\13\1\0\1\13"+
    "\7\0\20\13\13\0\3\13\1\0\11\13\1\0\3\13\1\0\26\13"+
    "\1\0\7\13\1\0\2\13\1\0\5\13\2\0\12\13\1\0\3\13"+
    "\1\0\3\13\2\0\1\13\17\0\4\13\2\0\12\13\21\0\3\13"+
    "\1\0\10\13\2\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13"+
    "\1\0\5\13\2\0\11\13\2\0\2\13\2\0\3\13\10\0\2\13"+
    "\4\0\2\13\1\0\5\13\2\0\12\13\1\0\1\13\20\0\2\13"+
    "\1\0\6\13\3\0\3\13\1\0\4\13\3\0\2\13\1\0\1\13"+
    "\1\0\2\13\3\0\2\13\3\0\3\13\3\0\14\13\4\0\5\13"+
    "\3\0\3\13\1\0\4\13\2\0\1\13\6\0\1\13\16\0\12\13"+
    "\20\0\4\13\1\0\10\13\1\0\3\13\1\0\27\13\1\0\20\13"+
    "\3\0\10\13\1\0\3\13\1\0\4\13\7\0\2\13\1\0\2\13"+
    "\6\0\4\13\2\0\12\13\21\0\3\13\1\0\10\13\1\0\3\13"+
    "\1\0\27\13\1\0\12\13\1\0\5\13\2\0\11\13\1\0\3\13"+
    "\1\0\4\13\7\0\2\13\7\0\1\13\1\0\4\13\2\0\12\13"+
    "\1\0\2\13\16\0\3\13\1\0\10\13\1\0\3\13\1\0\51\13"+
    "\2\0\10\13\1\0\3\13\1\0\5\13\10\0\1\13\10\0\4\13"+
    "\2\0\12\13\12\0\6\13\2\0\2\13\1\0\22\13\3\0\30\13"+
    "\1\0\11\13\1\0\1\13\2\0\7\13\3\0\1\13\4\0\6\13"+
    "\1\0\1\13\1\0\10\13\6\0\12\13\2\0\2\13\15\0\72\13"+
    "\5\0\17\13\1\0\12\13\47\0\2\13\1\0\1\13\2\0\2\13"+
    "\1\0\1\13\2\0\1\13\6\0\4\13\1\0\7\13\1\0\3\13"+
    "\1\0\1\13\1\0\1\13\2\0\2\13\1\0\15\13\1\0\3\13"+
    "\2\0\5\13\1\0\1\13\1\0\6\13\2\0\12\13\2\0\4\13"+
    "\40\0\1\13\27\0\2\13\6\0\12\13\13\0\1\13\1\0\1\13"+
    "\1\0\1\13\4\0\12\13\1\0\44\13\4\0\24\13\1\0\22\13"+
    "\1\0\44\13\11\0\1\13\71\0\112\13\6\0\116\13\2\0\46\13"+
    "\1\0\1\13\5\0\1\13\2\0\53\13\1\0\u014d\13\1\0\4\13"+
    "\2\0\7\13\1\0\1\13\1\0\4\13\2\0\51\13\1\0\4\13"+
    "\2\0\41\13\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13"+
    "\2\0\17\13\1\0\71\13\1\0\4\13\2\0\103\13\2\0\3\13"+
    "\40\0\20\13\20\0\125\13\14\0\u026c\13\2\0\21\13\1\24\32\13"+
    "\5\0\113\13\3\0\13\13\7\0\15\13\1\0\7\13\13\0\25\13"+
    "\13\0\24\13\14\0\15\13\1\0\3\13\1\0\2\13\14\0\124\13"+
    "\3\0\1\13\4\0\2\13\2\0\12\13\41\0\3\13\2\0\12\13"+
    "\6\0\130\13\10\0\53\13\5\0\106\13\12\0\37\13\1\0\14\13"+
    "\4\0\14\13\12\0\50\13\2\0\5\13\13\0\54\13\4\0\32\13"+
    "\6\0\12\13\46\0\34\13\4\0\77\13\1\0\35\13\2\0\13\13"+
    "\6\0\12\13\15\0\1\13\10\0\17\13\101\0\114\13\4\0\12\13"+
    "\21\0\11\13\14\0\164\13\14\0\70\13\10\0\12\13\3\0\61\13"+
    "\122\0\3\13\1\0\43\13\1\0\2\13\6\0\366\13\6\0\u011a\13"+
    "\2\0\6\13\2\0\46\13\2\0\6\13\2\0\10\13\1\0\1\13"+
    "\1\0\1\13\1\0\1\13\1\0\37\13\2\0\65\13\1\0\7\13"+
    "\1\0\1\13\3\0\3\13\1\0\7\13\3\0\4\13\2\0\6\13"+
    "\4\0\15\13\5\0\3\13\1\0\7\13\3\0\13\24\35\0\1\17"+
    "\1\17\5\0\1\24\17\0\2\13\23\0\1\13\12\0\1\24\21\0"+
    "\1\13\15\0\1\13\20\0\15\13\63\0\41\13\21\0\1\13\4\0"+
    "\1\13\2\0\12\13\1\0\1\13\3\0\5\13\6\0\1\13\1\0"+
    "\1\13\1\0\1\13\1\0\4\13\1\0\13\13\2\0\4\13\5\0"+
    "\5\13\4\0\1\13\21\0\51\13\u032d\0\64\13\u0716\0\57\13\1\0"+
    "\57\13\1\0\205\13\6\0\11\13\14\0\46\13\1\0\1\13\5\0"+
    "\1\13\2\0\70\13\7\0\1\13\17\0\30\13\11\0\7\13\1\0"+
    "\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0"+
    "\7\13\1\0\7\13\1\0\40\13\57\0\1\13\u01d0\0\1\24\4\0"+
    "\3\13\31\0\17\13\1\0\5\13\2\0\5\13\4\0\126\13\2\0"+
    "\2\13\2\0\3\13\1\0\132\13\1\0\4\13\5\0\51\13\3\0"+
    "\136\13\21\0\33\13\65\0\20\13\u0200\0\u19b6\13\112\0\u51cd\13\63\0"+
    "\u048d\13\103\0\56\13\2\0\u010d\13\3\0\34\13\24\0\63\13\1\0"+
    "\12\13\1\0\37\13\1\0\123\13\45\0\11\13\2\0\147\13\2\0"+
    "\4\13\1\0\36\13\2\0\2\13\105\0\61\13\30\0\64\13\14\0"+
    "\105\13\13\0\12\13\6\0\30\13\3\0\1\13\4\0\56\13\2\0"+
    "\44\13\14\0\35\13\3\0\101\13\16\0\13\13\6\0\37\13\1\0"+
    "\67\13\11\0\16\13\2\0\12\13\6\0\27\13\3\0\111\13\30\0"+
    "\3\13\2\0\20\13\2\0\5\13\12\0\6\13\2\0\6\13\2\0"+
    "\6\13\11\0\7\13\1\0\7\13\1\0\53\13\1\0\4\13\4\0"+
    "\2\13\132\0\53\13\1\0\2\13\2\0\12\13\6\0\u2ba4\13\14\0"+
    "\27\13\4\0\61\13\u2104\0\u016e\13\2\0\152\13\46\0\7\13\14\0"+
    "\5\13\5\0\14\13\1\0\15\13\1\0\5\13\1\0\1\13\1\0"+
    "\2\13\1\0\2\13\1\0\154\13\41\0\u016b\13\22\0\100\13\2\0"+
    "\66\13\50\0\14\13\4\0\20\13\20\0\16\13\5\0\2\13\30\0"+
    "\3\13\40\0\5\13\1\0\207\13\23\0\12\13\7\0\32\13\4\0"+
    "\1\13\1\0\32\13\13\0\131\13\3\0\6\13\2\0\6\13\2\0"+
    "\6\13\2\0\3\13\43\0\14\13\1\0\32\13\1\0\23\13\1\0"+
    "\2\13\1\0\17\13\2\0\16\13\42\0\173\13\105\0\65\13\210\0"+
    "\1\13\202\0\35\13\3\0\61\13\17\0\1\13\37\0\40\13\20\0"+
    "\33\13\5\0\53\13\5\0\36\13\2\0\44\13\4\0\10\13\1\0"+
    "\5\13\52\0\236\13\2\0\12\13\126\0\50\13\10\0\64\13\234\0"+
    "\u0137\13\11\0\26\13\12\0\10\13\230\0\6\13\2\0\1\13\1\0"+
    "\54\13\1\0\2\13\3\0\1\13\2\0\27\13\12\0\27\13\11\0"+
    "\37\13\141\0\26\13\12\0\32\13\106\0\70\13\6\0\2\13\100\0"+
    "\4\13\1\0\2\13\5\0\10\13\1\0\3\13\1\0\33\13\4\0"+
    "\3\13\4\0\1\13\40\0\35\13\3\0\35\13\43\0\10\13\1\0"+
    "\36\13\31\0\66\13\12\0\26\13\12\0\23\13\15\0\22\13\156\0"+
    "\111\13\u03b7\0\107\13\37\0\12\13\17\0\74\13\25\0\31\13\7\0"+
    "\12\13\6\0\65\13\1\0\12\13\20\0\44\13\2\0\1\13\11\0"+
    "\105\13\13\0\13\13\45\0\22\13\1\0\45\13\170\0\73\13\5\0"+
    "\12\13\7\0\3\13\1\0\10\13\2\0\2\13\2\0\26\13\1\0"+
    "\7\13\1\0\2\13\1\0\5\13\2\0\11\13\2\0\2\13\2\0"+
    "\3\13\11\0\1\13\5\0\7\13\2\0\7\13\3\0\5\13\u010b\0"+
    "\106\13\1\0\1\13\10\0\12\13\246\0\66\13\2\0\11\13\77\0"+
    "\101\13\3\0\1\13\13\0\12\13\46\0\70\13\10\0\12\13\u01d6\0"+
    "\112\13\25\0\1\13\u01c0\0\71\13\u0507\0\u0399\13\147\0\157\13\u0b91\0"+
    "\u042f\13\u33d1\0\u0239\13\7\0\37\13\1\0\12\13\146\0\36\13\2\0"+
    "\5\13\13\0\67\13\11\0\4\13\14\0\12\13\11\0\25\13\5\0"+
    "\23\13\u0370\0\105\13\13\0\57\13\20\0\21\13\u4060\0\2\13\u0bfe\0"+
    "\153\13\5\0\15\13\3\0\11\13\7\0\12\13\3\0\2\13\u14c6\0"+
    "\5\13\3\0\6\13\10\0\10\13\2\0\7\13\36\0\4\13\224\0"+
    "\3\13\u01bb\0\125\13\1\0\107\13\1\0\2\13\2\0\1\13\2\0"+
    "\2\13\2\0\4\13\1\0\14\13\1\0\1\13\1\0\7\13\1\0"+
    "\101\13\1\0\4\13\2\0\10\13\1\0\7\13\1\0\34\13\1\0"+
    "\4\13\1\0\5\13\1\0\1\13\3\0\7\13\1\0\u0154\13\2\0"+
    "\31\13\1\0\31\13\1\0\37\13\1\0\31\13\1\0\37\13\1\0"+
    "\31\13\1\0\37\13\1\0\31\13\1\0\37\13\1\0\31\13\1\0"+
    "\10\13\2\0\62\13\u1000\0\305\13\13\0\7\13\u0529\0\4\13\1\0"+
    "\33\13\1\0\2\13\1\0\1\13\2\0\1\13\1\0\12\13\1\0"+
    "\4\13\1\0\1\13\1\0\1\13\6\0\1\13\4\0\1\13\1\0"+
    "\1\13\1\0\1\13\1\0\3\13\1\0\2\13\1\0\1\13\2\0"+
    "\1\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\2\13\1\0\1\13\2\0\4\13\1\0\7\13\1\0\4\13\1\0"+
    "\4\13\1\0\1\13\1\0\12\13\1\0\21\13\5\0\3\13\1\0"+
    "\5\13\1\0\21\13\u0274\0\32\13\6\0\32\13\6\0\32\13\u0e76\0"+
    "\ua6d7\13\51\0\u1035\13\13\0\336\13\u3fe2\0\u021e\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\13\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\1\11\1\1\1\10\2\1\1\0\1\1"+
    "\1\0\1\12\1\1\2\13\1\7\6\0\1\1\3\0"+
    "\1\1\7\0\1\14\1\0\1\15\3\0\1\15\2\0"+
    "\1\15\3\0\1\15\2\0\4\1\3\0\3\16\1\17"+
    "\3\0\1\17\4\0\1\17\4\0\1\17\2\0\1\15"+
    "\2\0\1\15\2\0\1\15\1\17\4\0\1\17\2\0"+
    "\1\17\3\0\1\17\1\0\1\16\11\0\1\17\7\0"+
    "\1\16\3\0\1\15\13\0\1\15\2\0\1\15\2\0"+
    "\1\15\7\0\1\17\1\15\1\0\2\15\5\0\1\17"+
    "\1\0\1\17\5\0\2\17\1\0\1\17\2\0\1\17"+
    "\2\0\1\17\2\0\1\17\2\0\1\17\1\0\1\17"+
    "\50\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\32\0\64\0\116\0\32\0\150\0\32\0\202"+
    "\0\234\0\266\0\320\0\352\0\u0104\0\u011e\0\u0138\0\u0152"+
    "\0\u016c\0\u0186\0\234\0\150\0\32\0\202\0\u01a0\0\u01ba"+
    "\0\u01d4\0\u01ee\0\u0208\0\u0222\0\u023c\0\u0256\0\u0270\0\u028a"+
    "\0\u02a4\0\u02be\0\u02d8\0\u02f2\0\u030c\0\u0326\0\u0340\0\u035a"+
    "\0\u0374\0\u038e\0\u03a8\0\u03a8\0\u03c2\0\u0208\0\u03dc\0\u03f6"+
    "\0\u0410\0\u03dc\0\u042a\0\u0444\0\u023c\0\u045e\0\u0478\0\u0492"+
    "\0\u0256\0\u04ac\0\u04c6\0\u04e0\0\u04fa\0\u0514\0\u02be\0\u052e"+
    "\0\u0548\0\u0562\0\u052e\0\u030c\0\u0326\0\u0340\0\u057c\0\u0596"+
    "\0\u05b0\0\u0374\0\u05ca\0\u05e4\0\u05fe\0\u0618\0\u03dc\0\u0632"+
    "\0\u064c\0\u0666\0\u0680\0\u0410\0\u069a\0\u06b4\0\u0410\0\u06ce"+
    "\0\u06e8\0\u0444\0\u0702\0\u071c\0\u0702\0\u04ac\0\u0736\0\u0750"+
    "\0\u04e0\0\u076a\0\u04e0\0\u0784\0\u079e\0\u052e\0\u07b8\0\u07d2"+
    "\0\u07ec\0\u0562\0\u0806\0\u0562\0\u0820\0\u083a\0\u0854\0\u086e"+
    "\0\u0888\0\u08a2\0\u08bc\0\u08d6\0\u08f0\0\u0702\0\u090a\0\u0924"+
    "\0\u093e\0\u0958\0\u0972\0\u098c\0\u09a6\0\u0820\0\u09c0\0\u09da"+
    "\0\u09f4\0\u0a0e\0\u0a28\0\u0a42\0\u0a5c\0\u0a76\0\u0a90\0\u0aaa"+
    "\0\u0ac4\0\u0ade\0\u0af8\0\u0b12\0\u0b2c\0\u0b46\0\u0b60\0\u0b7a"+
    "\0\u0b94\0\u0bae\0\u0bc8\0\u0be2\0\u0bfc\0\u0c16\0\u0c30\0\u0c4a"+
    "\0\u0c64\0\u0c7e\0\u0c98\0\u0cb2\0\u0ccc\0\u0ce6\0\u0d00\0\u0d1a"+
    "\0\u0d34\0\u0d4e\0\u0d68\0\u0d82\0\u0d9c\0\u0db6\0\u0dd0\0\u0dea"+
    "\0\u0e04\0\u0e1e\0\u0e38\0\u0e52\0\u0e6c\0\u0e86\0\u0ea0\0\u0eba"+
    "\0\u0ed4\0\u0eee\0\u0f08\0\u0f22\0\u0f3c\0\u0f56\0\u0f70\0\u0f8a"+
    "\0\u0fa4\0\u0fbe\0\u0fd8\0\u0ff2\0\u100c\0\u1026\0\u1040\0\u105a"+
    "\0\u1074\0\u108e\0\u10a8\0\u10c2\0\u10dc\0\u10f6\0\u1110\0\u112a"+
    "\0\u1144\0\u115e\0\u1178\0\u1192\0\u11ac\0\u11c6\0\u11e0\0\u11fa"+
    "\0\u1214\0\u122e\0\u1248\0\u1262\0\u127c\0\u1296\0\u12b0\0\u12ca"+
    "\0\u12e4\0\u12fe\0\u1318\0\u1332\0\u134c\0\u1366\0\u1380\0\u139a"+
    "\0\u13b4\0\u13ce\0\u13e8\0\u1402\0\u141c\0\u1436\0\u1450";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\4\1\12\1\13\1\2\1\14\1\15\1\16\1\17"+
    "\1\20\1\13\1\15\1\21\1\17\1\13\3\2\1\17"+
    "\4\2\1\22\2\2\1\23\1\2\2\0\1\2\1\24"+
    "\1\0\1\2\1\0\1\2\2\0\1\2\2\0\3\2"+
    "\1\0\2\2\1\25\1\2\1\22\2\2\1\23\1\2"+
    "\2\0\1\2\1\24\1\0\1\2\1\0\1\2\2\0"+
    "\1\2\2\0\3\2\1\0\4\2\1\22\1\2\1\26"+
    "\1\23\1\2\1\12\1\0\1\2\1\24\1\0\1\2"+
    "\1\0\1\2\2\0\1\2\2\0\3\2\1\0\4\24"+
    "\1\22\2\24\1\0\1\24\2\0\2\24\1\0\1\24"+
    "\1\0\1\24\2\0\1\24\2\0\3\24\1\0\4\2"+
    "\1\22\2\2\1\23\1\2\1\27\1\0\1\2\1\24"+
    "\1\0\1\2\1\0\1\2\2\0\1\2\2\0\3\2"+
    "\1\0\4\23\1\0\4\23\2\0\1\23\2\0\1\23"+
    "\1\0\1\23\2\0\1\23\2\0\3\23\7\0\1\30"+
    "\2\0\1\31\7\0\2\32\13\0\1\22\4\0\3\13"+
    "\1\0\1\13\2\0\3\13\2\0\1\13\4\0\4\33"+
    "\1\34\2\33\1\0\1\33\2\35\2\33\1\35\1\36"+
    "\1\0\1\33\2\35\1\33\1\0\1\35\3\33\12\0"+
    "\3\15\1\0\1\15\2\0\3\15\2\0\1\15\4\0"+
    "\4\16\1\37\2\16\1\40\1\16\2\41\1\16\1\42"+
    "\1\41\1\16\1\0\1\16\2\41\1\16\2\41\3\16"+
    "\1\41\32\0\4\2\1\22\2\2\1\23\1\2\2\15"+
    "\1\20\1\24\1\15\1\2\1\0\1\20\2\15\1\2"+
    "\1\0\1\15\3\2\1\0\4\21\1\43\2\21\1\44"+
    "\1\21\2\45\1\21\1\46\1\45\1\21\1\0\1\21"+
    "\2\45\1\21\2\45\3\21\1\45\4\47\1\50\2\47"+
    "\1\0\6\47\1\51\1\0\4\47\1\0\4\47\12\0"+
    "\1\27\7\0\2\32\20\0\1\27\26\0\1\52\2\0"+
    "\1\31\7\0\2\32\11\0\1\53\5\0\1\53\1\54"+
    "\20\0\4\33\1\34\2\33\1\55\1\33\2\35\2\33"+
    "\1\35\1\36\1\0\1\33\2\35\1\33\1\0\1\35"+
    "\1\56\2\33\1\0\4\57\1\60\2\57\1\55\6\57"+
    "\1\61\1\0\4\57\1\0\1\57\1\62\2\57\1\0"+
    "\4\35\1\63\2\35\1\55\6\35\1\64\1\0\4\35"+
    "\1\0\1\35\1\65\2\35\1\0\4\36\1\66\2\36"+
    "\1\67\1\36\2\64\2\36\1\64\1\36\1\0\1\36"+
    "\2\64\1\36\1\70\1\64\1\71\2\36\1\70\4\72"+
    "\1\73\2\72\1\41\6\72\1\74\1\0\4\72\1\41"+
    "\4\72\1\41\4\40\1\41\4\40\2\41\1\40\2\41"+
    "\1\75\1\0\1\40\2\41\1\40\2\41\3\40\17\41"+
    "\1\76\1\0\12\41\4\42\1\37\2\42\1\41\1\42"+
    "\2\41\2\42\1\41\1\77\1\0\1\42\2\41\1\42"+
    "\2\41\3\42\1\41\4\100\1\101\2\100\1\45\6\100"+
    "\1\102\1\0\3\100\1\103\1\45\4\100\1\45\4\44"+
    "\1\45\4\44\2\45\1\44\2\45\1\44\1\0\1\44"+
    "\2\45\1\44\2\45\3\44\20\45\1\0\3\45\1\104"+
    "\6\45\4\46\1\43\2\46\1\45\1\46\2\45\2\46"+
    "\1\45\1\46\1\0\1\46\2\45\1\105\2\45\3\46"+
    "\1\45\4\47\1\50\1\106\1\47\1\107\6\47\1\51"+
    "\1\0\4\47\1\0\4\47\1\0\4\47\1\110\1\106"+
    "\1\47\1\107\6\47\1\51\1\0\4\47\1\0\4\47"+
    "\1\0\4\51\1\111\1\112\1\51\1\113\7\51\1\0"+
    "\4\51\1\114\4\51\1\114\11\0\1\115\31\0\1\54"+
    "\20\0\4\35\1\63\2\35\1\55\6\35\1\64\1\0"+
    "\4\35\1\0\4\35\1\0\4\57\1\116\1\117\1\57"+
    "\1\120\6\57\1\61\1\0\4\57\1\0\1\57\1\62"+
    "\2\57\1\0\4\57\1\121\1\117\1\57\1\120\4\57"+
    "\1\122\1\57\1\61\1\0\4\57\1\0\1\57\1\62"+
    "\2\57\1\0\4\61\1\123\1\124\1\61\1\125\7\61"+
    "\1\0\4\61\1\126\1\61\1\127\2\61\1\126\4\35"+
    "\1\130\2\35\1\55\6\35\1\64\1\0\4\35\1\0"+
    "\1\35\1\65\2\35\1\0\4\64\1\131\2\64\1\67"+
    "\7\64\1\0\4\64\1\70\1\64\1\132\2\64\1\70"+
    "\4\133\1\134\2\133\1\67\6\133\1\61\1\0\4\133"+
    "\1\70\1\133\1\135\2\133\1\70\4\64\1\131\2\64"+
    "\1\67\7\64\1\0\4\64\1\70\4\64\17\70\1\64"+
    "\1\0\12\70\4\72\1\73\1\136\1\72\1\137\6\72"+
    "\1\74\1\0\4\72\1\41\4\72\1\41\4\72\1\140"+
    "\1\136\1\72\1\137\6\72\1\74\1\0\4\72\1\41"+
    "\4\72\1\41\4\141\1\142\1\143\1\141\1\144\6\141"+
    "\1\74\1\0\4\141\1\145\4\141\1\145\4\40\1\37"+
    "\4\40\2\41\1\40\2\41\1\75\1\0\1\40\2\41"+
    "\1\40\2\41\3\40\5\41\1\37\11\41\1\76\1\0"+
    "\12\41\4\100\1\101\1\146\1\100\1\147\6\100\1\102"+
    "\1\0\3\100\1\103\1\45\4\100\1\45\4\100\1\150"+
    "\1\146\1\100\1\147\6\100\1\102\1\0\3\100\1\103"+
    "\1\45\4\100\1\45\4\102\1\151\1\152\1\102\1\153"+
    "\7\102\1\0\3\102\1\154\1\155\4\102\1\155\4\47"+
    "\1\50\2\47\1\107\6\47\1\51\1\0\4\47\1\0"+
    "\4\47\1\0\4\47\1\110\1\106\1\47\1\107\4\47"+
    "\1\156\1\47\1\51\1\0\4\47\1\0\4\47\1\0"+
    "\4\51\1\157\1\112\1\51\1\113\7\51\1\0\4\51"+
    "\1\114\4\51\1\114\4\51\1\111\2\51\1\113\7\51"+
    "\1\0\4\51\1\114\4\51\17\114\1\51\1\0\12\114"+
    "\11\0\1\115\7\0\2\32\7\0\4\57\1\121\1\117"+
    "\1\57\1\120\6\57\1\61\1\0\4\57\1\0\1\57"+
    "\1\62\2\57\1\0\4\57\1\116\2\57\1\120\6\57"+
    "\1\61\1\0\4\57\1\0\4\57\1\0\4\57\1\121"+
    "\1\117\1\57\1\120\4\57\1\160\1\57\1\61\1\0"+
    "\4\57\1\0\1\57\1\62\2\57\1\0\4\57\1\116"+
    "\1\117\1\57\1\120\6\57\1\61\1\0\4\57\1\0"+
    "\1\161\1\62\2\57\1\0\4\61\1\162\1\124\1\61"+
    "\1\125\7\61\1\0\4\61\1\126\1\61\1\127\2\61"+
    "\1\126\4\61\1\123\2\61\1\125\7\61\1\0\4\61"+
    "\1\126\4\61\17\126\1\61\1\0\12\126\4\35\1\130"+
    "\2\35\1\55\4\35\1\163\1\35\1\64\1\0\4\35"+
    "\1\0\1\35\1\65\2\35\1\0\4\64\1\164\2\64"+
    "\1\67\7\64\1\0\4\64\1\70\1\64\1\132\2\64"+
    "\1\70\4\133\1\165\1\166\1\133\1\167\6\133\1\61"+
    "\1\0\4\133\1\70\1\133\1\135\2\133\1\70\4\133"+
    "\1\170\1\166\1\133\1\167\4\133\1\171\1\133\1\61"+
    "\1\0\4\133\1\70\1\133\1\135\2\133\1\70\4\72"+
    "\1\73\2\72\1\137\6\72\1\74\1\0\4\72\1\41"+
    "\4\72\1\41\4\72\1\140\1\136\1\72\1\137\4\72"+
    "\1\172\1\72\1\74\1\0\4\72\1\41\4\72\1\41"+
    "\4\141\1\173\1\143\1\141\1\144\6\141\1\74\1\0"+
    "\4\141\1\145\4\141\1\145\4\141\1\142\2\141\1\144"+
    "\6\141\1\74\1\0\4\141\1\145\4\141\17\145\1\74"+
    "\1\0\12\145\4\100\1\101\2\100\1\147\6\100\1\102"+
    "\1\0\3\100\1\103\1\45\4\100\1\45\4\100\1\150"+
    "\1\146\1\100\1\147\4\100\1\174\1\100\1\102\1\0"+
    "\3\100\1\103\1\45\4\100\1\45\4\102\1\175\1\152"+
    "\1\102\1\153\7\102\1\0\3\102\1\154\1\155\4\102"+
    "\1\155\4\102\1\151\2\102\1\153\7\102\1\0\3\102"+
    "\1\154\1\155\4\102\17\155\1\102\1\0\3\155\1\176"+
    "\6\155\4\47\1\50\1\106\1\47\1\107\6\47\1\51"+
    "\1\0\4\47\1\0\1\177\3\47\1\0\4\51\1\157"+
    "\1\112\1\51\1\113\4\51\1\200\2\51\1\0\4\51"+
    "\1\114\4\51\1\114\4\57\1\116\1\117\1\57\1\120"+
    "\6\57\1\61\1\0\4\57\1\0\1\201\1\62\2\57"+
    "\1\0\4\57\1\116\1\117\1\57\1\120\6\57\1\61"+
    "\1\0\4\57\1\0\1\57\1\202\2\57\1\0\4\61"+
    "\1\162\1\124\1\61\1\125\4\61\1\203\2\61\1\0"+
    "\4\61\1\126\1\61\1\127\2\61\1\126\4\35\1\63"+
    "\2\35\1\55\6\35\1\64\1\0\4\35\1\0\1\204"+
    "\1\65\2\35\1\0\4\64\1\164\2\64\1\67\4\64"+
    "\1\205\2\64\1\0\4\64\1\70\1\64\1\132\2\64"+
    "\1\70\4\133\1\170\1\166\1\133\1\167\6\133\1\61"+
    "\1\0\4\133\1\70\1\133\1\135\2\133\1\70\4\133"+
    "\1\165\2\133\1\167\6\133\1\61\1\0\4\133\1\70"+
    "\4\133\1\70\4\133\1\170\1\166\1\133\1\167\4\133"+
    "\1\206\1\133\1\61\1\0\4\133\1\70\1\133\1\135"+
    "\2\133\1\70\4\133\1\165\1\166\1\133\1\167\6\133"+
    "\1\61\1\0\4\133\1\70\1\207\1\135\2\133\1\70"+
    "\4\72\1\73\1\136\1\72\1\137\6\72\1\74\1\0"+
    "\4\72\1\41\1\210\3\72\1\41\4\141\1\173\1\143"+
    "\1\141\1\144\4\141\1\211\1\141\1\74\1\0\4\141"+
    "\1\145\4\141\1\145\4\100\1\101\1\146\1\100\1\147"+
    "\6\100\1\102\1\0\3\100\1\103\1\45\1\212\3\100"+
    "\1\45\4\102\1\175\1\152\1\102\1\153\4\102\1\213"+
    "\2\102\1\0\3\102\1\154\1\155\4\102\1\155\4\47"+
    "\1\50\1\106\1\47\1\107\6\47\1\51\1\0\4\47"+
    "\1\0\1\47\1\214\2\47\1\0\4\51\1\111\1\112"+
    "\1\51\1\113\7\51\1\0\4\51\1\114\1\215\3\51"+
    "\1\114\4\57\1\116\1\117\1\57\1\120\6\57\1\61"+
    "\1\0\4\57\1\0\1\57\1\216\2\57\1\0\4\57"+
    "\1\116\1\117\1\57\1\120\1\217\5\57\1\61\1\0"+
    "\4\57\1\0\1\57\1\62\2\57\1\0\4\61\1\123"+
    "\1\124\1\61\1\125\7\61\1\0\4\61\1\126\1\220"+
    "\1\127\2\61\1\126\4\35\1\63\2\35\1\55\6\35"+
    "\1\64\1\0\4\35\1\0\1\35\1\221\2\35\1\0"+
    "\4\64\1\131\2\64\1\67\7\64\1\0\4\64\1\70"+
    "\1\222\1\132\2\64\1\70\4\133\1\165\1\166\1\133"+
    "\1\167\6\133\1\61\1\0\4\133\1\70\1\223\1\135"+
    "\2\133\1\70\4\133\1\165\1\166\1\133\1\167\6\133"+
    "\1\61\1\0\4\133\1\70\1\133\1\224\2\133\1\70"+
    "\4\72\1\73\1\136\1\72\1\137\6\72\1\74\1\0"+
    "\4\72\1\41\1\72\1\225\2\72\1\41\4\141\1\142"+
    "\1\143\1\141\1\144\6\141\1\74\1\0\4\141\1\145"+
    "\1\226\3\141\1\145\4\100\1\101\1\146\1\100\1\147"+
    "\6\100\1\102\1\0\3\100\1\103\1\45\1\100\1\227"+
    "\2\100\1\45\4\102\1\151\1\152\1\102\1\153\7\102"+
    "\1\0\3\102\1\154\1\155\1\230\3\102\1\155\4\47"+
    "\1\50\1\106\1\47\1\107\1\231\5\47\1\51\1\0"+
    "\4\47\1\0\4\47\1\0\4\51\1\111\1\112\1\51"+
    "\1\113\7\51\1\0\4\51\1\114\1\51\1\232\2\51"+
    "\1\114\4\57\1\116\1\117\1\57\1\120\1\233\5\57"+
    "\1\61\1\0\4\57\1\0\1\57\1\62\2\57\1\0"+
    "\4\57\1\116\1\234\1\57\1\120\6\57\1\61\1\0"+
    "\4\57\1\0\1\57\1\62\2\57\1\0\4\61\1\123"+
    "\1\124\1\61\1\125\7\61\1\0\4\61\1\126\1\61"+
    "\1\235\2\61\1\126\4\35\1\63\2\35\1\55\1\236"+
    "\5\35\1\64\1\0\4\35\1\0\1\35\1\65\2\35"+
    "\1\0\4\64\1\131\2\64\1\67\7\64\1\0\4\64"+
    "\1\70\1\64\1\237\2\64\1\70\4\133\1\165\1\166"+
    "\1\133\1\167\6\133\1\61\1\0\4\133\1\70\1\133"+
    "\1\240\2\133\1\70\4\133\1\165\1\166\1\133\1\167"+
    "\1\241\5\133\1\61\1\0\4\133\1\70\1\133\1\135"+
    "\2\133\1\70\4\72\1\73\1\136\1\72\1\137\1\242"+
    "\5\72\1\74\1\0\4\72\1\41\4\72\1\41\4\141"+
    "\1\142\1\143\1\141\1\144\6\141\1\74\1\0\4\141"+
    "\1\145\1\141\1\243\2\141\1\145\4\100\1\101\1\146"+
    "\1\100\1\147\1\244\5\100\1\102\1\0\3\100\1\103"+
    "\1\45\4\100\1\45\4\102\1\151\1\152\1\102\1\153"+
    "\7\102\1\0\3\102\1\154\1\155\1\102\1\245\2\102"+
    "\1\155\4\47\1\50\1\246\1\47\1\107\6\47\1\51"+
    "\1\0\4\47\1\0\4\47\1\0\4\51\1\111\1\112"+
    "\1\51\1\113\1\247\6\51\1\0\4\51\1\114\4\51"+
    "\1\114\4\57\1\116\1\250\1\57\1\120\6\57\1\61"+
    "\1\0\4\57\1\0\1\57\1\62\2\57\1\0\4\57"+
    "\1\116\1\117\1\57\1\120\6\57\1\61\1\0\4\57"+
    "\1\0\1\57\1\62\1\251\1\57\1\0\4\61\1\123"+
    "\1\124\1\61\1\125\1\252\6\61\1\0\4\61\1\126"+
    "\1\61\1\127\2\61\1\126\4\35\1\63\1\253\1\35"+
    "\1\55\6\35\1\64\1\0\4\35\1\0\1\35\1\65"+
    "\2\35\1\0\4\64\1\131\2\64\1\67\1\254\6\64"+
    "\1\0\4\64\1\70\1\64\1\132\2\64\1\70\4\133"+
    "\1\165\1\166\1\133\1\167\1\255\5\133\1\61\1\0"+
    "\4\133\1\70\1\133\1\135\2\133\1\70\4\133\1\165"+
    "\1\256\1\133\1\167\6\133\1\61\1\0\4\133\1\70"+
    "\1\133\1\135\2\133\1\70\4\72\1\73\1\257\1\72"+
    "\1\137\6\72\1\74\1\0\4\72\1\41\4\72\1\41"+
    "\4\141\1\142\1\143\1\141\1\144\1\260\5\141\1\74"+
    "\1\0\4\141\1\145\4\141\1\145\4\100\1\101\1\261"+
    "\1\100\1\147\6\100\1\102\1\0\3\100\1\103\1\45"+
    "\4\100\1\45\4\102\1\151\1\152\1\102\1\153\1\262"+
    "\6\102\1\0\3\102\1\154\1\155\4\102\1\155\4\47"+
    "\1\50\1\106\1\47\1\107\6\47\1\51\1\0\4\47"+
    "\1\0\2\47\1\263\1\47\1\0\4\51\1\111\1\264"+
    "\1\51\1\113\7\51\1\0\4\51\1\114\4\51\1\114"+
    "\4\57\1\116\1\117\1\57\1\120\6\57\1\61\1\0"+
    "\4\57\1\0\1\57\1\62\1\265\1\57\1\0\4\57"+
    "\1\116\1\117\1\57\1\120\6\57\1\61\1\0\4\57"+
    "\1\0\1\57\1\62\1\57\1\266\1\0\4\61\1\123"+
    "\1\267\1\61\1\125\7\61\1\0\4\61\1\126\1\61"+
    "\1\127\2\61\1\126\4\35\1\63\2\35\1\55\6\35"+
    "\1\64\1\0\4\35\1\0\1\35\1\65\1\270\1\35"+
    "\1\0\4\64\1\131\1\271\1\64\1\67\7\64\1\0"+
    "\4\64\1\70\1\64\1\132\2\64\1\70\4\133\1\165"+
    "\1\272\1\133\1\167\6\133\1\61\1\0\4\133\1\70"+
    "\1\133\1\135\2\133\1\70\4\133\1\165\1\166\1\133"+
    "\1\167\6\133\1\61\1\0\4\133\1\70\1\133\1\135"+
    "\1\273\1\133\1\70\4\72\1\73\1\136\1\72\1\137"+
    "\6\72\1\74\1\0\4\72\1\41\2\72\1\274\1\72"+
    "\1\41\4\141\1\142\1\275\1\141\1\144\6\141\1\74"+
    "\1\0\4\141\1\145\4\141\1\145\4\100\1\101\1\146"+
    "\1\100\1\147\6\100\1\102\1\0\3\100\1\103\1\45"+
    "\2\100\1\276\1\100\1\45\4\102\1\151\1\277\1\102"+
    "\1\153\7\102\1\0\3\102\1\154\1\155\4\102\1\155"+
    "\4\47\1\50\1\106\1\47\1\107\6\47\1\51\1\0"+
    "\4\47\1\0\3\47\1\300\1\0\4\51\1\111\1\112"+
    "\1\51\1\113\7\51\1\0\4\51\1\114\2\51\1\301"+
    "\1\51\1\114\4\57\1\116\1\117\1\57\1\120\6\57"+
    "\1\61\1\0\4\57\1\0\1\57\1\62\1\57\1\302"+
    "\1\0\4\57\1\116\1\117\1\57\1\120\6\57\1\61"+
    "\1\0\4\57\1\0\1\57\1\62\2\57\1\303\4\61"+
    "\1\123\1\124\1\61\1\125\7\61\1\0\4\61\1\126"+
    "\1\61\1\127\1\304\1\61\1\126\4\35\1\63\2\35"+
    "\1\55\6\35\1\64\1\0\4\35\1\0\1\35\1\65"+
    "\1\35\1\305\1\0\4\64\1\131\2\64\1\67\7\64"+
    "\1\0\4\64\1\70\1\64\1\132\1\306\1\64\1\70"+
    "\4\133\1\165\1\166\1\133\1\167\6\133\1\61\1\0"+
    "\4\133\1\70\1\133\1\135\1\307\1\133\1\70\4\133"+
    "\1\165\1\166\1\133\1\167\6\133\1\61\1\0\4\133"+
    "\1\70\1\133\1\135\1\133\1\310\1\70\4\72\1\73"+
    "\1\136\1\72\1\137\6\72\1\74\1\0\4\72\1\41"+
    "\3\72\1\311\1\41\4\141\1\142\1\143\1\141\1\144"+
    "\6\141\1\74\1\0\4\141\1\145\2\141\1\312\1\141"+
    "\1\145\4\100\1\101\1\146\1\100\1\147\6\100\1\102"+
    "\1\0\3\100\1\103\1\45\3\100\1\313\1\45\4\102"+
    "\1\151\1\152\1\102\1\153\7\102\1\0\3\102\1\154"+
    "\1\155\2\102\1\314\1\102\1\155\4\47\1\50\1\106"+
    "\1\47\1\107\6\47\1\51\1\0\4\47\1\0\4\47"+
    "\1\315\4\51\1\111\1\112\1\51\1\113\7\51\1\0"+
    "\4\51\1\114\3\51\1\316\1\114\4\57\1\116\1\117"+
    "\1\57\1\120\6\57\1\61\1\0\4\57\1\0\1\57"+
    "\1\62\2\57\1\317\27\0\1\320\2\0\4\61\1\123"+
    "\1\124\1\61\1\125\7\61\1\0\4\61\1\126\1\61"+
    "\1\127\1\61\1\321\1\126\4\35\1\63\2\35\1\55"+
    "\6\35\1\64\1\0\4\35\1\0\1\35\1\65\2\35"+
    "\1\303\4\64\1\131\2\64\1\67\7\64\1\0\4\64"+
    "\1\70\1\64\1\132\1\64\1\322\1\70\4\133\1\165"+
    "\1\166\1\133\1\167\6\133\1\61\1\0\4\133\1\70"+
    "\1\133\1\135\1\133\1\323\1\70\4\133\1\165\1\166"+
    "\1\133\1\167\6\133\1\61\1\0\4\133\1\70\1\133"+
    "\1\135\2\133\1\324\4\72\1\73\1\136\1\72\1\137"+
    "\6\72\1\74\1\0\4\72\1\41\4\72\1\325\4\141"+
    "\1\142\1\143\1\141\1\144\6\141\1\74\1\0\4\141"+
    "\1\145\3\141\1\326\1\145\4\100\1\101\1\146\1\100"+
    "\1\147\6\100\1\102\1\0\3\100\1\103\1\45\4\100"+
    "\1\327\4\102\1\151\1\152\1\102\1\153\7\102\1\0"+
    "\3\102\1\154\1\155\3\102\1\330\1\155\27\0\1\331"+
    "\2\0\4\51\1\111\1\112\1\51\1\113\7\51\1\0"+
    "\4\51\1\114\4\51\1\332\27\0\1\333\7\0\1\35"+
    "\24\0\4\61\1\123\1\124\1\61\1\125\7\61\1\0"+
    "\4\61\1\126\1\61\1\127\2\61\1\334\4\64\1\131"+
    "\2\64\1\67\7\64\1\0\4\64\1\70\1\64\1\132"+
    "\2\64\1\324\4\133\1\165\1\166\1\133\1\167\6\133"+
    "\1\61\1\0\4\133\1\70\1\133\1\135\2\133\1\335"+
    "\16\70\1\64\1\0\7\70\1\336\2\70\16\41\1\76"+
    "\1\0\7\41\1\337\2\41\4\141\1\142\1\143\1\141"+
    "\1\144\6\141\1\74\1\0\4\141\1\145\4\141\1\340"+
    "\17\45\1\0\3\45\1\104\3\45\1\341\2\45\4\102"+
    "\1\151\1\152\1\102\1\153\7\102\1\0\3\102\1\154"+
    "\1\155\4\102\1\342\5\0\1\47\24\0\16\114\1\51"+
    "\1\0\7\114\1\343\2\114\5\0\1\57\24\0\16\126"+
    "\1\61\1\0\7\126\1\344\2\126\16\70\1\64\1\0"+
    "\7\70\1\345\7\70\1\64\10\70\1\64\1\0\12\70"+
    "\5\41\1\72\10\41\1\76\1\0\12\41\16\145\1\74"+
    "\1\0\7\145\1\346\2\145\5\45\1\100\11\45\1\0"+
    "\3\45\1\104\6\45\16\155\1\102\1\0\3\155\1\176"+
    "\3\155\1\347\2\155\5\114\1\51\10\114\1\51\1\0"+
    "\12\114\5\126\1\61\10\126\1\61\1\0\12\126\5\70"+
    "\1\133\10\70\1\64\1\0\12\70\5\145\1\141\10\145"+
    "\1\74\1\0\12\145\5\155\1\102\10\155\1\102\1\0"+
    "\3\155\1\176\6\155";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5226];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\15\1\1\11\2\1\1\0\1\1\1\0\5\1"+
    "\6\0\1\1\3\0\1\1\7\0\1\1\1\0\1\1"+
    "\3\0\1\1\2\0\1\1\3\0\1\1\2\0\4\1"+
    "\3\0\4\1\3\0\1\1\4\0\1\1\4\0\1\1"+
    "\2\0\1\1\2\0\1\1\2\0\2\1\4\0\1\1"+
    "\2\0\1\1\3\0\1\1\1\0\1\1\11\0\1\1"+
    "\7\0\1\1\3\0\1\1\13\0\1\1\2\0\1\1"+
    "\2\0\1\1\7\0\2\1\1\0\2\1\5\0\1\1"+
    "\1\0\1\1\5\0\2\1\1\0\1\1\2\0\1\1"+
    "\2\0\1\1\2\0\1\1\2\0\1\1\1\0\1\1"+
    "\50\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

    Token token = null;
    private List<Token> listaTokens = new ArrayList<>();
    private static Integer linea = 1;

    //Alfabeto
    private static final String IMPLICA = "Implica"; 
    private static final String ATOMO = "Atomo"; 
    private static final String VARIABLE = "Variable"; 
    private static final String PREDICADO = "Predicado"; 
    private static final String ENTERO = "Entero"; 
    private static final String PTO_FLOT = "Punto Flotante"; 
    private static final String CADENA = "Cadena"; 
    private static final String LISTA = "Lista"; 
    private static final String PTO_FIJO = "Punto Fijo"; 
    private static final String PARENTESIS_DER = "Parentesis Derecho"; 
    private static final String PARENTESIS_IZQ = "Parentesis Izquierdo"; 
    private static final String PUNTO = "Punto"; 
    private static final String PUNTO_COMA = "Punto y coma"; 
    private static final String COMA = "Coma";

    /**
     * Constructor vacio de lexer para su utilizacion en pruebas
     *
     * 
     */
    Lexer() {
        }
        
    /**
     * Metodo que regresa la lista de tokens
     *
     * 
     */
    public List<Token> getListaTokens() {
        return listaTokens;
    }
    public List<Token> analizar(String archivo){
        FileReader in = null;
        try{
            in = new FileReader(archivo);
            Lexer lex = new Lexer(in);
            while(!lex.zzAtEOF){
            lex.yylex();
            }
        }catch(Exception ex){
            System.out.println("no work");
        }finally{
            try{
                in.close();
            }catch(Exception ex){
                System.out.println("no close");
            }
        }
            return listaTokens;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2646) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { token = new Token(this.linea, ATOMO, yytext()); listaTokens.add(token); System.out.println("Tokens = " + listaTokens.stream().collect(Collectors.toList()));
            }
          case 16: break;
          case 2: 
            { token = new Token(this.linea, PUNTO_COMA, yytext()); listaTokens.add(token); System.out.println("Tokens = " + listaTokens.stream().collect(Collectors.toList())); this.linea++;
            }
          case 17: break;
          case 3: 
            { token = new Token(this.linea, PARENTESIS_IZQ, yytext()); listaTokens.add(token); System.out.println("Tokens = " + listaTokens.stream().collect(Collectors.toList()));
            }
          case 18: break;
          case 4: 
            { token = new Token(this.linea, PARENTESIS_DER, yytext()); listaTokens.add(token); System.out.println("Tokens = " + listaTokens.stream().collect(Collectors.toList()));
            }
          case 19: break;
          case 5: 
            { token = new Token(this.linea, PUNTO, yytext()); listaTokens.add(token); System.out.println("Tokens = " + listaTokens.stream().collect(Collectors.toList()));
            }
          case 20: break;
          case 6: 
            { token = new Token(this.linea, COMA, yytext()); listaTokens.add(token); System.out.println("Tokens = " + listaTokens.stream().collect(Collectors.toList()));
            }
          case 21: break;
          case 7: 
            { token = new Token(this.linea, ENTERO, yytext()); listaTokens.add(token); System.out.println("Tokens = " + listaTokens.stream().collect(Collectors.toList()));
            }
          case 22: break;
          case 8: 
            { System.out.print(yytext());
            }
          case 23: break;
          case 9: 
            { token = new Token(this.linea, VARIABLE, yytext()); listaTokens.add(token); System.out.println("Tokens = " + listaTokens.stream().collect(Collectors.toList()));
            }
          case 24: break;
          case 10: 
            { token = new Token(this.linea, IMPLICA, yytext()); listaTokens.add(token); System.out.println("Tokens = " + listaTokens.stream().collect(Collectors.toList()));
            }
          case 25: break;
          case 11: 
            { token = new Token(this.linea, PTO_FIJO, yytext()); listaTokens.add(token); System.out.println("Tokens = " + listaTokens.stream().collect(Collectors.toList()));
            }
          case 26: break;
          case 12: 
            { token = new Token(this.linea, PTO_FLOT, yytext()); listaTokens.add(token); System.out.println("Tokens = " + listaTokens.stream().collect(Collectors.toList()));
            }
          case 27: break;
          case 13: 
            { token = new Token(this.linea, LISTA, yytext()); listaTokens.add(token); System.out.println("Tokens = " + listaTokens.stream().collect(Collectors.toList()));
            }
          case 28: break;
          case 14: 
            { token = new Token(this.linea, CADENA, yytext()); listaTokens.add(token); System.out.println("Tokens = " + listaTokens.stream().collect(Collectors.toList()));
            }
          case 29: break;
          case 15: 
            { token = new Token(this.linea, PREDICADO, yytext()); listaTokens.add(token); System.out.println("Tokens = " + listaTokens.stream().collect(Collectors.toList()));
            }
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
